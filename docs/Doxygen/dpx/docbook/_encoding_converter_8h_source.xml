<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__encoding_converter_8h_source" xml:lang="ru">
<title>EncodingConverter.h</title>
<indexterm><primary>EncodingConverter.h</primary></indexterm>
См. документацию.<programlisting linenumbering="unnumbered"><anchor xml:id="__encoding_converter_8h_source_1l00001"/>00001 <emphasis role="preprocessor">#ifndef&#32;BLANKS_ENCODINGCONVERTER_H</emphasis>
<anchor xml:id="__encoding_converter_8h_source_1l00002"/>00002 <emphasis role="preprocessor">#define&#32;BLANKS_ENCODINGCONVERTER_H</emphasis>
<anchor xml:id="__encoding_converter_8h_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&quot;string&quot;</emphasis>
<anchor xml:id="__encoding_converter_8h_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&quot;vector&quot;</emphasis>
<anchor xml:id="__encoding_converter_8h_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&quot;filesystem&quot;</emphasis>
<anchor xml:id="__encoding_converter_8h_source_1l00006"/>00006 
<anchor xml:id="__encoding_converter_8h_source_1l00014"/><link linkend="_class_encoding_converter">00014</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_encoding_converter">EncodingConverter</link>&#32;{
<anchor xml:id="__encoding_converter_8h_source_1l00015"/>00015 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="__encoding_converter_8h_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<link linkend="_class_encoding_converter">EncodingConverter</link>(std::string&#32;&#32;inputDir,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;outputDir&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="__encoding_converter_8h_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_encoding_converter_1ae79126a88077fe4ac04a5cd09edf72d3">convert</link>();
<anchor xml:id="__encoding_converter_8h_source_1l00018"/>00018 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="__encoding_converter_8h_source_1l00019"/><link linkend="_class_encoding_converter_1aeeb826a3fbe68c0e94a9621efef19c9e">00019</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_encoding_converter_1aeeb826a3fbe68c0e94a9621efef19c9e">inputDirectory</link>;
<anchor xml:id="__encoding_converter_8h_source_1l00020"/><link linkend="_class_encoding_converter_1a7069e0d212765a9eae194b5b6f5edff4">00020</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_encoding_converter_1a7069e0d212765a9eae194b5b6f5edff4">outputDirectory</link>;
<anchor xml:id="__encoding_converter_8h_source_1l00021"/><link linkend="_class_encoding_converter_1ac566af31b8555e40cb8b14cbb21e5f02">00021</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_encoding_converter_1ac566af31b8555e40cb8b14cbb21e5f02">useTempDirectory</link>;
<anchor xml:id="__encoding_converter_8h_source_1l00022"/><link linkend="_class_encoding_converter_1a7a697b1dd34f92c0ee0d94ea98966f89">00022</link> &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;<link linkend="_class_encoding_converter_1a7a697b1dd34f92c0ee0d94ea98966f89">fileExtensions</link>;
<anchor xml:id="__encoding_converter_8h_source_1l00023"/><link linkend="_class_encoding_converter_1a5b25a05020fd9ba0638cf2e21f69369f">00023</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_encoding_converter_1a5b25a05020fd9ba0638cf2e21f69369f">sourceEncoding</link>;
<anchor xml:id="__encoding_converter_8h_source_1l00024"/><link linkend="_class_encoding_converter_1acbdca252b050fca89d6fda1caef80da7">00024</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_encoding_converter_1acbdca252b050fca89d6fda1caef80da7">targetEncoding</link>;
<anchor xml:id="__encoding_converter_8h_source_1l00025"/><link linkend="_class_encoding_converter_1a51031e51d1ab00d24ff3d1912044bf6b">00025</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_class_encoding_converter_1a51031e51d1ab00d24ff3d1912044bf6b">filesProcessed</link>;
<anchor xml:id="__encoding_converter_8h_source_1l00026"/><link linkend="_class_encoding_converter_1a560484bdcdc929771c7d42877cab9643">00026</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_class_encoding_converter_1a560484bdcdc929771c7d42877cab9643">filesConverted</link>;
<anchor xml:id="__encoding_converter_8h_source_1l00027"/>00027 
<anchor xml:id="__encoding_converter_8h_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_encoding_converter_1a327b6fd6e84ab1949e73302fc9e153e4">loadSettings</link>();
<anchor xml:id="__encoding_converter_8h_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_encoding_converter_1ab066b92f365f593c44d6825071463e08">convertDirectory</link>(<emphasis role="keyword">const</emphasis>&#32;std::filesystem::path&amp;&#32;dir);
<anchor xml:id="__encoding_converter_8h_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_encoding_converter_1a460858eb34940271be93a5aa08452a66">convertFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::filesystem::path&amp;&#32;filepath);
<anchor xml:id="__encoding_converter_8h_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_encoding_converter_1ac7f6cefb08a76f5fa3696ee18beb8faf">iconvConvert</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;input,&#32;std::string&amp;&#32;output,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;fromCharset,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;toCharset);
<anchor xml:id="__encoding_converter_8h_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_encoding_converter_1a6a4a2d610029ac2c890fb0265626ebd0">printStats</link>()&#32;<emphasis role="keyword">const</emphasis>;
<anchor xml:id="__encoding_converter_8h_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_encoding_converter_1a9b72ba808c4b0c7087f63fd0c3b8a5d7">is_utf8</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;str);
<anchor xml:id="__encoding_converter_8h_source_1l00034"/>00034 };
<anchor xml:id="__encoding_converter_8h_source_1l00035"/>00035 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//BLANKS_ENCODINGCONVERTER_H</emphasis>
</programlisting></section>
