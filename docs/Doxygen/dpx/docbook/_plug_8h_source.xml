<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__plug_8h_source" xml:lang="ru">
<title>Plug.h</title>
<indexterm><primary>Plug.h</primary></indexterm>
См. документацию.<programlisting linenumbering="unnumbered"><anchor xml:id="__plug_8h_source_1l00001"/>00001 <emphasis role="preprocessor">#ifndef&#32;BLANKS_PLUG_H</emphasis>
<anchor xml:id="__plug_8h_source_1l00002"/>00002 <emphasis role="preprocessor">#define&#32;BLANKS_PLUG_H</emphasis>
<anchor xml:id="__plug_8h_source_1l00003"/>00003 
<anchor xml:id="__plug_8h_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="__plug_8h_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__parser_configuration_8h">ParserConfiguration.h</link>&quot;</emphasis>
<anchor xml:id="__plug_8h_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_json_8h">json.h</link>&quot;</emphasis>
<anchor xml:id="__plug_8h_source_1l00007"/>00007 
<anchor xml:id="__plug_8h_source_1l00008"/><link linkend="_namespaceparser">00008</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceparser">parser</link>{
<anchor xml:id="__plug_8h_source_1l00009"/><link linkend="_namespaceparser_1a6a1b9a41dcebf3bc40e63bcb26a93f64">00009</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::unique_ptr&lt;ParserConfiguration&gt;&#32;<link linkend="_namespaceparser_1a6a1b9a41dcebf3bc40e63bcb26a93f64">create</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;config_file_path)&#32;{
<anchor xml:id="__plug_8h_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(config_file_path.ends_with(<emphasis role="stringliteral">&quot;.json&quot;</emphasis>))&#32;{
<anchor xml:id="__plug_8h_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_unique&lt;json&gt;(config_file_path);
<anchor xml:id="__plug_8h_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__plug_8h_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__plug_8h_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;Unsupported&#32;file&#32;type:&#32;&quot;</emphasis>&#32;+&#32;config_file_path);
<anchor xml:id="__plug_8h_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__plug_8h_source_1l00016"/>00016 &#32;&#32;&#32;&#32;}
<anchor xml:id="__plug_8h_source_1l00017"/>00017 }
<anchor xml:id="__plug_8h_source_1l00018"/>00018 
<anchor xml:id="__plug_8h_source_1l00019"/>00019 
<anchor xml:id="__plug_8h_source_1l00020"/>00020 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//BLANKS_PLUG_H</emphasis>
</programlisting></section>
