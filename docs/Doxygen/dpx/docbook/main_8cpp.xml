<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_main_8cpp" xml:lang="ru">
<title>Файл main.cpp</title>
<indexterm><primary>main.cpp</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;iostream&gt;<?linebreak?>#include &quot;include/Converting/EncodingConverter.h&quot;<?linebreak?>#include &quot;include/CommandLine/CommandLine.h&quot;<?linebreak?>#include &quot;include/struct/cfm.h&quot;<?linebreak?>#include &quot;include/struct/zgt.h&quot;<?linebreak?>#include &quot;include/Reader/textReader.h&quot;<?linebreak?>#include &quot;include/Generated/Generated.h&quot;<?linebreak?>#include &quot;include/RenderPDF/RenderPDF.h&quot;<?linebreak?>#include &quot;include/Parser/Plug.h&quot;<?linebreak?></programlisting>Граф включаемых заголовочных файлов для main.cpp:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="main_8cpp__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Функции    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_main_8cpp_1ab97d7330981023823ad0d4017ddbec3b">print_duration</link> (const auto &amp;start)</para>
</listitem>
            <listitem><para>std::filesystem::path <link linkend="_main_8cpp_1a17fe4a740253ee0f9a2dbe3821cb02b4">find_file_by_name</link> (const std::filesystem::path &amp;directory, std::string &amp;model_name, const std::string &amp;extension)</para>
</listitem>
            <listitem><para>std::string <link linkend="_main_8cpp_1a333b5413e0cb25ebfc2919e897c49e0c">getCurrentDateTime</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_main_8cpp_1a0ddf1224851353fc92bfbff6f499fa97">main</link> (int argc, char *argv[])</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Функции</title>
<anchor xml:id="_main_8cpp_1a17fe4a740253ee0f9a2dbe3821cb02b4"/><section>
    <title>find_file_by_name()</title>
<indexterm><primary>find_file_by_name</primary><secondary>main.cpp</secondary></indexterm>
<indexterm><primary>main.cpp</primary><secondary>find_file_by_name</secondary></indexterm>
<para><computeroutput>std::filesystem::path find_file_by_name (const std::filesystem::path &amp; directory, std::string &amp; model_name, const std::string &amp; extension)</computeroutput></para><para>
См. определение в файле <link linkend="_main_8cpp_source">main.cpp</link> строка <link linkend="_main_8cpp_source_1l00019">19</link></para>
<programlisting linenumbering="unnumbered{
00020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;entry&#32;:&#32;std::filesystem::recursive_directory_iterator(directory))&#32;{
00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(entry.is_regular_file())&#32;{
00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;file_name&#32;=&#32;entry.path().filename().string();
00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;file_extension&#32;=&#32;entry.path().extension().string();
00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file_name&#32;==&#32;model_name&#32;+&#32;file_extension&#32;&amp;&amp;&#32;file_extension&#32;==&#32;extension)&#32;{
00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::filesystem::path&#32;path_str&#32;=&#32;entry.path();
00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//std::replace(path_str.string().begin(),&#32;path_str.string().end(),&#32;&apos;\\&apos;,&#32;&apos;/&apos;);</emphasis>
00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;path_str;
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00030 &#32;&#32;&#32;&#32;}
00031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;File&#32;not&#32;found:&#32;&quot;</emphasis>&#32;+&#32;model_name);
00032 }
</programlisting>Граф вызова функции:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="main_8cpp_a17fe4a740253ee0f9a2dbe3821cb02b4_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_main_8cpp_1a333b5413e0cb25ebfc2919e897c49e0c"/><section>
    <title>getCurrentDateTime()</title>
<indexterm><primary>getCurrentDateTime</primary><secondary>main.cpp</secondary></indexterm>
<indexterm><primary>main.cpp</primary><secondary>getCurrentDateTime</secondary></indexterm>
<para><computeroutput>std::string getCurrentDateTime ( )</computeroutput></para><para>
См. определение в файле <link linkend="_main_8cpp_source">main.cpp</link> строка <link linkend="_main_8cpp_source_1l00034">34</link></para>
<programlisting linenumbering="unnumbered">00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00035 &#32;&#32;&#32;&#32;std::time_t&#32;currentTime&#32;=&#32;std::time(<emphasis role="keyword">nullptr</emphasis>);
00036 &#32;&#32;&#32;&#32;std::tm*&#32;localTime&#32;=&#32;std::localtime(&amp;currentTime);
00037 
00038 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;dateTimeString[20];
00039 &#32;&#32;&#32;&#32;std::strftime(dateTimeString,&#32;<emphasis role="keyword">sizeof</emphasis>(dateTimeString),&#32;<emphasis role="stringliteral">&quot;%Y-%m-%d_%H-%M-%S&quot;</emphasis>,&#32;localTime);
00040 
00041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(dateTimeString);
00042 }
</programlisting>Граф вызова функции:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="main_8cpp_a333b5413e0cb25ebfc2919e897c49e0c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_main_8cpp_1a0ddf1224851353fc92bfbff6f499fa97"/><section>
    <title>main()</title>
<indexterm><primary>main</primary><secondary>main.cpp</secondary></indexterm>
<indexterm><primary>main.cpp</primary><secondary>main</secondary></indexterm>
<para><computeroutput>int main (int argc, char * argv[])</computeroutput></para><para>
См. определение в файле <link linkend="_main_8cpp_source">main.cpp</link> строка <link linkend="_main_8cpp_source_1l00044">44</link></para>
<programlisting linenumbering="unnumbered">00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00045 &#32;&#32;&#32;&#32;setlocale(LC_ALL,&#32;<emphasis role="stringliteral">&quot;ru_RU.UTF-8&quot;</emphasis>);
00046 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;start&#32;=&#32;std::chrono::high_resolution_clock::now();
00047 &#32;&#32;&#32;&#32;{
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_command_line">CommandLine</link>&#32;cmd(argc,&#32;argv);
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;command_type&#32;=&#32;cmd.get_command_type();
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;args&#32;=&#32;cmd.get_args();
00051 
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(command_type&#32;==&#32;<link linkend="_class_command_line_1a92cbc16916d68d2117eef38093155941a58cb16120e5f67c8966bbe20c5c8ff26">CommandLine::CommandType::GEN</link>){
00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generated">Generated</link>&#32;gen;
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;gen.<link linkend="_class_generated_1a83bc49c8c5facc46a56afe4f1af0d01a">generateJsonFile</link>(<emphasis role="stringliteral">&quot;setting.json&quot;</emphasis>);
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00056 
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(command_type&#32;==&#32;<link linkend="_class_command_line_1a92cbc16916d68d2117eef38093155941a696b031073e74bf2cb98e5ef201d4aa3">CommandLine::CommandType::UNKNOWN</link>){
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_main_8cpp_1ab97d7330981023823ad0d4017ddbec3b">print_duration</link>(start);
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Неизвестная&#32;команда\n&quot;</emphasis>;
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00062 
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(command_type&#32;==&#32;<link linkend="_class_command_line_1a92cbc16916d68d2117eef38093155941a947a338c0e482e4afcffca292d5944f2">CommandLine::CommandType::CONVERT</link>){
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(args.size()&#32;==&#32;1){
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_encoding_converter">EncodingConverter</link>&#32;converter(args[0]);
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;converter.convert();
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(args.size()&#32;==&#32;2)&#32;{
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_encoding_converter">EncodingConverter</link>&#32;converter(args[0],&#32;args[1]);
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;converter.convert();
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Неверное&#32;количество&#32;аргументов.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00075 
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_class_command_line_1a92cbc16916d68d2117eef38093155941af96eee4e48ee90430f17fb3a8388507b">CommandLine::CommandType::PRINT</link>&#32;==&#32;command_type){
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;config_parser&#32;=&#32;<link linkend="_namespaceparser_1a6a1b9a41dcebf3bc40e63bcb26a93f64">parser::create</link>(args[0]);
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;debug&#32;=&#32;config_parser-&gt;getInteger(<emphasis role="stringliteral">&quot;debug&quot;</emphasis>);
00079 
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;tbl_directory&#32;=&#32;config_parser-&gt;getFilePath(<emphasis role="stringliteral">&quot;tbl&quot;</emphasis>);
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;tbl_files&#32;=&#32;config_parser-&gt;getFileList(<emphasis role="stringliteral">&quot;tbl&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;scale&quot;</emphasis>);
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;tbl&gt;&#32;tbl_data;
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;tbl_file&#32;:&#32;tbl_files)&#32;{
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Чтение&#32;TBL:\t&quot;</emphasis>&#32;&lt;&lt;&#32;tbl_file&#32;&lt;&lt;&#32;std::endl;
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtbl">tbl</link>&#32;temp_tbl;
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtext_reader">textReader</link>(tbl_file).<link linkend="_classtext_reader_1ac9b23d5e5a58431fb114f221098a2640">read_tbl</link>(temp_tbl);
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbl_data.push_back(temp_tbl);
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(debug){
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp_tbl.<link linkend="_structtbl_1a1656f3d8341995db3e9711ecf583cc94">display</link>();
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00092 
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;cfm_file&#32;=&#32;config_parser-&gt;getFilePath(<emphasis role="stringliteral">&quot;cfm&quot;</emphasis>);
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;cfm_file_path&#32;=&#32;<link linkend="_main_8cpp_1a17fe4a740253ee0f9a2dbe3821cb02b4">find_file_by_name</link>(cfm_file,&#32;tbl_data[0].model,&#32;<emphasis role="stringliteral">&quot;.cfm&quot;</emphasis>);
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Чтение&#32;CFM:\t&quot;</emphasis>&#32;&lt;&lt;&#32;cfm_file_path&#32;&lt;&lt;&#32;std::endl;
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structcfm">cfm</link>&#32;cfm_data;
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtext_reader">textReader</link>(cfm_file_path).<link linkend="_classtext_reader_1a5cd4eeebf53787a1434d037c54993071">read_cfm</link>(cfm_data);
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(debug){
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cfm_data.<link linkend="_structcfm_1a34655b4bfca15e5fb6afeedcf05c1289">display</link>();
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00101 
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;point_file&#32;=&#32;config_parser-&gt;getFilePath(<emphasis role="stringliteral">&quot;point&quot;</emphasis>);
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;point_file_path&#32;=&#32;<link linkend="_main_8cpp_1a17fe4a740253ee0f9a2dbe3821cb02b4">find_file_by_name</link>(point_file,&#32;tbl_data[0].model,&#32;<emphasis role="stringliteral">&quot;.point&quot;</emphasis>);
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Чтение&#32;набора&#32;точек:\t&quot;</emphasis>&#32;&lt;&lt;&#32;point_file_path&#32;&lt;&lt;&#32;std::endl;
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structpoint">point</link>&#32;point_data;
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtext_reader">textReader</link>(point_file_path).<link linkend="_classtext_reader_1a9f261ea0ff26bf191afd61212c0a79e5">read_point</link>(point_data);
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(debug){
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;point_data.<link linkend="_structpoint_1a0b248ae2a8dab47a95f68ffb03f33ede">display</link>();
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00110 
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;zgt_file&#32;=&#32;config_parser-&gt;getFilePath(<emphasis role="stringliteral">&quot;zgt&quot;</emphasis>);
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;zgt_file_path&#32;=&#32;<link linkend="_main_8cpp_1a17fe4a740253ee0f9a2dbe3821cb02b4">find_file_by_name</link>(zgt_file,&#32;cfm_data.<link linkend="_structcfm_1a6400105680203ffabfa9860662530647">blank</link>,&#32;<emphasis role="stringliteral">&quot;.згт&quot;</emphasis>);
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Чтение&#32;заготовок:\t&quot;</emphasis>&#32;&lt;&lt;&#32;zgt_file_path&#32;&lt;&lt;&#32;std::endl;
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structzgt">zgt</link>&#32;zgt_data;
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtext_reader">textReader</link>(zgt_file_path).<link linkend="_classtext_reader_1af98fb017c822ba0f17c58a1dda32a787">read_zgt</link>(zgt_data);
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(debug){
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zgt_data.<link linkend="_structzgt_1a54f8b1de8e8e339540ddddd0e7503ac2">display</link>();
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//std::cout&#32;&lt;&lt;&#32;&quot;Чтение&#32;наборов&#32;изображений:\t&quot;&#32;&lt;&lt;&#32;nbr_file_path&#32;&lt;&lt;&#32;std::endl;</emphasis>
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;nbr_file&#32;=&#32;config_parser-&gt;getFilePath(<emphasis role="stringliteral">&quot;nbr&quot;</emphasis>);
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//auto&#32;nbr_file_path&#32;=&#32;find_file_by_name(zgt_file,&#32;cfm_data.blank,&#32;&quot;.нбр&quot;);</emphasis>
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnbr">nbr</link>&#32;nbr_data;
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//textReader(nbr_file_path).read_nbr(nbr_data);</emphasis>
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(debug&#32;==&#32;0){
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00126 
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_render_p_d_f">RenderPDF</link>&#32;pdf(cfm_data,&#32;zgt_data,&#32;tbl_data,&#32;nbr_data,&#32;point_data,&#32;config_parser-&gt;getFilePath(<emphasis role="stringliteral">&quot;fontPath&quot;</emphasis>));
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;filename&#32;=&#32;<link linkend="_main_8cpp_1a333b5413e0cb25ebfc2919e897c49e0c">getCurrentDateTime</link>()&#32;+&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>&#32;+&#32;cfm_data.<link linkend="_structcfm_1a6400105680203ffabfa9860662530647">blank</link>&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pdf.generatePDF(filename);
00130 
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00132 
00133 &#32;&#32;&#32;&#32;}
00134 
00135 &#32;&#32;&#32;&#32;<link linkend="_main_8cpp_1ab97d7330981023823ad0d4017ddbec3b">print_duration</link>(start);
00136 }
</programlisting>Граф вызовов:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="main_8cpp_a0ddf1224851353fc92bfbff6f499fa97_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_main_8cpp_1ab97d7330981023823ad0d4017ddbec3b"/><section>
    <title>print_duration()</title>
<indexterm><primary>print_duration</primary><secondary>main.cpp</secondary></indexterm>
<indexterm><primary>main.cpp</primary><secondary>print_duration</secondary></indexterm>
<para><computeroutput>void print_duration (const auto &amp; start)</computeroutput></para><para>
См. определение в файле <link linkend="_main_8cpp_source">main.cpp</link> строка <link linkend="_main_8cpp_source_1l00011">11</link></para>
<programlisting linenumbering="unnumbered">00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00012 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;stop&#32;=&#32;std::chrono::high_resolution_clock::now();
00013 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;duration_microseconds&#32;=&#32;std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(stop&#32;-&#32;start);
00014 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;duration_milliseconds&#32;=&#32;std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(stop&#32;-&#32;start);
00015 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Время&#32;выполнения:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;duration_microseconds.count()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;microseconds&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
00016 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Время&#32;выполнения:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;duration_milliseconds.count()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;milliseconds&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
00017 }
</programlisting>Граф вызова функции:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="main_8cpp_ab97d7330981023823ad0d4017ddbec3b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
